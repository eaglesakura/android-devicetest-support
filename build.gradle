/**
 * 1.0.x   : release
 * 1.1.x   : suppoprt JUnit4
 * 1.2.x   : 基底クラスを変更
 * 2.0.x   : Espressoがフリーズする条件下で動作するよう、UiAutomatorでの操作を追加
 */
def ARTIFACT_VERSION = "2.0"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'me.tatarka:gradle-retrolambda:3.5.0' // support Lambda
    }
}

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    mavenCentral()
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda Support */

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }
    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 25
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"    // set project!
    }
    lintOptions {
        abortOnError false
    }
}

// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        compile project(':eglibrary:simple-logger')
        compile project(':eglibrary:simple-utils')
        compile project(':eglibrary:junit-support')
        compile project(':eglibrary:android-simple-utils')
    } else {
        compile "com.eaglesakura:simple-logger:1.2.449"
        compile "com.eaglesakura:simple-utils:1.1.556"
        compile "com.eaglesakura:junit-support:1.0.58"
        compile "com.eaglesakura:android-simple-utils:1.0.543"
    }

    compile "com.android.support:support-v4:25.3.0"
    compile "com.android.support:appcompat-v7:25.3.0"

    /**
     * Unit Testing
     */
    compile 'junit:junit:4.12'
    compile "com.android.support:support-annotations:25.3.0"
    compile 'com.android.support.test:runner:0.5'
    compile("com.android.support.test.espresso:espresso-core:2.2") {
        exclude(group: "com.android.support")
    }
    compile('com.android.support.test.espresso:espresso-contrib:2.2') {
        exclude(group: "com.android.support")
    }
    compile "com.android.support.test.uiautomator:uiautomator-v18:2.1.2"
}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name) || "".equals(ARTIFACT_VERSION)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "${file(".").name} ver ${ARTIFACT_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
